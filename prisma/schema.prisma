generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 디자인, 개발 전공등 대분류를 담은 테이블
model Major {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 대분류의 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  majorSkills MajorSkill[]
  members     Member[]
}

/// 디자인, 개발의 소분류를 담은 테이블
model MajorSkill {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 대분류 고유 ID
  majorId   Int
  /// 소분류의 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  major                    Major                     @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  memberMajorSkillMappings MemberMajorSkillMapping[]
}

/// 멤버가 선택한 소분류 스킬
model MemberMajorSkillMapping {
  /// 고유 ID
  id           Int      @id @default(autoincrement())
  /// 소분류 고유 ID
  majorSkillId Int
  /// 멤버 고유 ID
  memberId     Int
  /// 생성일자
  createdAt    DateTime @default(now()) @db.Timestamp(6)

  majorSkill MajorSkill @relation(fields: [majorSkillId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  member     Member     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 우리 서비스의 회원을 담은 테이블 
model Member {
  /// 고유 ID
  id         Int       @id @default(autoincrement())
  /// 멤버 전공의 대분류 ID
  majorId    Int?
  /// 로그인 ID 소셜 로그인이면 고유 ID 이메일 로그인이면 이메일
  /// 소셜 로그인 prefix(kakao: k, apple: a, google: g)
  account    String    @unique @db.VarChar(255)
  /// 멤버 닉네임
  nickname   String?   @unique @db.VarChar(30)
  /// 유저 본명이 아닌 표시 이름
  memberName String    @default(uuid()) @db.VarChar(255)
  /// 직업
  job        String?   @db.VarChar(255)
  /// 멤버의 상태 (Pending: 0, Active: 1, InActive: 2)
  status     Int       @default(0) @db.SmallInt
  /// 로그인 타입
  /// kakao: 1, google: 2, apple: 3
  loginType  Int       @db.SmallInt
  /// 멤버 썸네일
  thumbnail  String?   @unique @db.VarChar(255)
  /// 소개
  introduce  String?   @db.Text()
  /// 생성일자
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 탈퇴일자
  deletedAt  DateTime? @db.Timestamp(6)

  major                    Major?                    @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  memberStatistics         MemberStatistics?
  followers                MemberFollow[]            @relation("follower")
  followings               MemberFollow[]            @relation("following")
  lessons                  Lesson[]
  memberMajorSkillMappings MemberMajorSkillMapping[]
  memberSkillMappings      MemberSkillMapping[]
  memberInterestMappings   MemberInterestMapping[]
  lessonSolutions          LessonSolution[]
  lessonComments           LessonComment[]
  lessonLevelEvaluations   LessonLevelEvaluation[]
  lessonBookmarks          LessonBookmark[]
  lessonLikes              LessonLike[]
  questions                Question[]
  questionAnswers          QuestionAnswer[]
  questionLikes            QuestionLike[]
  questionAnswerLikes      QuestionAnswerLike[]
}

/// member 의 스킬
model MemberSkill {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// skill 명
  name      String   @unique @db.VarChar(50)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  memberSkillMappings MemberSkillMapping[]
}

/// member skill mapping model
model MemberSkillMapping {
  /// 고유 ID
  id            Int      @id @default(autoincrement())
  /// member 고유 ID
  memberId      Int
  /// skill 고유 ID
  memberSkillId Int
  /// 생성일자
  createdAt     DateTime @default(now()) @db.Timestamp(6)

  memberSkill MemberSkill @relation(fields: [memberSkillId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 멤버 관심사
model MemberInterest {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// skill 명
  name      String   @unique @db.VarChar(50)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  memberInterestMappings MemberInterestMapping[]
}

/// member interest mapping model
model MemberInterestMapping {
  /// 고유 ID
  id               Int      @id @default(autoincrement())
  /// member 고유 ID
  memberId         Int
  /// skill 고유 ID
  memberInterestId Int
  /// 생성일자
  createdAt        DateTime @default(now()) @db.Timestamp(6)

  memberInterest MemberInterest @relation(fields: [memberInterestId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  member         Member         @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 멤버 활동 모델
model MemberStatistics {
  /// member 고유 ID
  memberId       Int  @id @unique
  /// 문제 출제 개수
  lessonCount    Int  @default(0)
  /// 문제-해결 개수
  solutionCount  Int  @default(0)
  /// 피드백 한 총 개수
  feedbackCount  Int  @default(0)
  /// 질문 개수
  commentCount   Int  @default(0)
  /// 팔로워 개수
  followerCount  Int  @default(0)
  /// 팔로윙 개수
  followingCount Int  @default(0)
  /// 랭킹
  rank           Int?
  /// 포인트
  point          Int  @default(0)

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

/// 멤버 팔로우 팔로잉 모델 
model MemberFollow {
  /// 고유 ID
  id          Int      @id @default(autoincrement())
  /// 팔로우 하는 멤버 ID
  followerId  Int
  /// 팔로잉 하는 멤버 ID
  followingId Int
  /// 생성 일자
  createdAt   DateTime @default(now())

  follower  Member @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following Member @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
}

/// 이미지에 대한 처리는 회의 후 추가
/// 과제에 대한 테이블
model Lesson {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 과제 생성한 멤버 고유 ID
  memberId    Int
  /// 출제자가 평가한 과제 난이도 
  levelId     Int
  /// 과제의 카테고리
  categoryId  Int
  /// 과제 제목
  title       String    @db.VarChar(255)
  /// 과제 설명 
  description String
  /// 과제 조회수        
  hit         Int       @default(0)
  /// 과제 썸네일
  thumbnail   String?   @db.VarChar(255)
  /// 생성일자
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  member                 Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonLevel            LessonLevel             @relation(fields: [levelId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  lessonCategory         LessonCategory          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  lessonSolutions        LessonSolution[]
  lessonHashtagMappings  LessonHashtagMapping[]
  lessonComments         LessonComment[]
  lessonLevelEvaluations LessonLevelEvaluation[]
  lessonBookMarks        LessonBookmark[]
  lessonLikes            LessonLike[]
}

/// 과제를 수행한 멤버들의 과제 난이도 평가 테이블 
model LessonLevelEvaluation {
  /// 고유 ID
  id        Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId  Int
  /// 과제 고유 ID
  lessonId  Int
  /// 난이도 고유 ID
  levelId   Int
  /// 생성일자        
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자 
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt DateTime? @db.Timestamp(6)

  member      Member       @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LessonLevel LessonLevel? @relation(fields: [levelId], references: [id])
}

/// 이미지에 대한 처리는 회의 후 추가
/// 과제"물"에 대한 테이블 
model LessonSolution {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId    Int
  /// 과제 고유 ID
  lessonId    Int
  /// 과제물 본문
  description String
  /// 과제와 관련된 링크(e.g. 깃허브)
  relatedLink String?
  /// 생성일자          
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 멤버의 과제 북마크에 대한 테이블 
model LessonBookmark {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 과제를 북마크한 멤버 고유 ID
  memberId  Int
  /// 북마크 된 과제 고유 ID
  lessonId  Int
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 과제 좋아요에 대한 테이블
model LessonLike {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 과제 좋아요를 누른 멤버 고유 ID
  memberId  Int
  /// 좋아요 눌린 과제 고유 ID
  lessonId  Int
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 과제의 난이도에 대한 테이블 
model LessonLevel {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 난이도 (상, 중, 하)
  level     String   @db.VarChar(10)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  lessons                Lesson[]
  lessonLevelEvaluations LessonLevelEvaluation[]
}

/// 과제의 해시 태그
model LessonHashtag {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 태그 
  tag       String   @db.VarChar(50)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  lessonHashtagMappings LessonHashtagMapping[]
}

model LessonHashtagMapping {
  /// 고유 ID
  id              Int      @id @default(autoincrement())
  /// 과제 고유 ID
  lessonId        Int
  /// 과제 해시 태그 고유 ID
  lessonHashtagId Int
  /// 생성일자
  createdAt       DateTime @default(now()) @db.Timestamp(6)

  lesson        Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonHashtag LessonHashtag @relation(fields: [lessonHashtagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 과제에 달린 댓글
model LessonComment {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId    Int
  /// 과제 고유 ID
  lessonId    Int
  /// 댓글 설명
  description String    @db.VarChar(255)
  /// 생성일자  
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LessonCategory {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 카테고리 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  lessons Lesson[]
}

/// 질문 카테고리
model QuestionCategory {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 카테고리 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  questions Question[]
}

/// 질문에 대한 테이블
model Question {
  /// 고유 ID
  id         Int       @id @default(autoincrement())
  /// QnA 생성한 멤버 고유 ID
  memberId   Int
  /// QnA 카테고리 고유 ID
  categoryId Int
  /// QnA 제목
  title      String
  /// QnA 컨텐츠
  content    String
  /// QnA 조회수
  hit        Int       @default(0)
  /// 생성일자
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt  DateTime? @db.Timestamp(6)

  member        Member                 @relation(fields: [memberId], references: [id])
  category      QuestionCategory       @relation(fields: [categoryId], references: [id])
  likes         QuestionLike[]
  answers       QuestionAnswer[]
  tags          QuestionHashtag[]
  acceptAnswers QuestionAcceptAnswer[]
}

/// 질문 해시태그
model QuestionHashtag {
  /// 고유 ID
  id         Int      @id @default(autoincrement())
  /// 태그 이름
  name       String   @db.VarChar(20)
  /// 질문 고유 ID
  questionId Int
  /// 생성일자
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  question Question @relation(fields: [questionId], references: [id])
}

/// 질문의 좋아요에 대한 테이블
model QuestionLike {
  /// 고유 ID
  id         Int      @id @default(autoincrement())
  /// 질문에 좋아요를 누른 멤버 고유 ID
  memberId   Int
  /// 질문 고유 ID
  questionId Int
  /// 생성일자
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  member   Member   @relation(fields: [memberId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
}

/// 질문의 답변에 대한 댓글
model QuestionAnswer {
  /// 고유 ID
  id         Int       @id @default(autoincrement())
  /// QnA 답변 생성한 멤버 고유 ID
  memberId   Int
  /// QnA 고유 ID
  questionId Int
  /// QnA 답변
  answer     String    @db.VarChar(255)
  /// 생성일자
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt  DateTime? @db.Timestamp(6)

  member   Member                @relation(fields: [memberId], references: [id])
  question Question              @relation(fields: [questionId], references: [id])
  likes    QuestionAnswerLike[]
  accept   QuestionAcceptAnswer?
}

/// 질문의 댓글 좋아요에 대한 테이블
model QuestionAnswerLike {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 좋아요를 누른 멤버 고유 ID
  memberId  Int
  /// QnA 답변 고유 ID
  answerId  Int
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  member Member         @relation(fields: [memberId], references: [id])
  answer QuestionAnswer @relation(fields: [answerId], references: [id])
}

/// 질문에 대한 채택된 답변 참조테이블
model QuestionAcceptAnswer {
  /// 고유 ID
  id         Int      @id @default(autoincrement())
  /// question 고유 ID
  questionId Int
  /// question Asnwer 고유 ID
  answerId   Int      @unique
  /// 생성일자
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionAnswer QuestionAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
