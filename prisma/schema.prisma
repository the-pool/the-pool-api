generator client {
  provider      = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 디자인, 개발의 소분류를 담은 테이블
model MainSkill {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 대분류 고유 ID
  majorId   Int
  /// 소분류의 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  Major       Major         @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  MemberSkill MemberSkill[]
}

/// 디자인, 개발 전공등 대분류를 담은 테이블 
model Major {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 대분류의 이름
  name      String   @unique @db.VarChar(30)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  MainSkill MainSkill[]
  Member    Member[]
}

/// 우리 서비스의 회원을 담은 테이블 
model Member {
  /// 고유 ID
  id        Int       @id @default(autoincrement())
  /// 멤버 전공의 대분류 ID
  majorId   Int?
  /// 로그인 ID 소셜 로그인이면 고유 ID 이메일 로그인이면 이메일
  /// 소셜 로그인 prefix(kakao: k, apple: a, google: g)
  account   String    @unique @db.VarChar(255)
  /// 멤버 닉네임
  nickname  String?   @unique @db.VarChar(30)
  /// 멤버의 상태 (Pending: 0, Active: 1, InActive: 2)
  status    Int       @default(0) @db.SmallInt
  /// 로그인 타입
  /// kakao: 1, google: 2, apple: 3
  loginType Int       @db.SmallInt
  /// 멤버 썸네일
  thumbnail String?   @unique @db.VarChar(255)
  /// 소개
  introduce String?   @db.VarChar(255)
  /// 생성일자
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 탈퇴일자
  deletedAt DateTime? @db.Timestamp(6)

  Lesson                Lesson[]
  Major                 Major?                  @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  MemberSkill           MemberSkill[]
  LessonSolution        LessonSolution[]
  LessonComment         LessonComment[]
  LessonLevelEvaluation LessonLevelEvaluation[]
  LessonBookMark        LessonBookMark[]
  follower              MemberFollow[]          @relation("follower")
  following             MemberFollow[]          @relation("following")
  MemberReport          MemberReport?
}

/// 멤버 활동 모델
model MemberReport {
  /// 고유 ID
  id             Int  @id @default(autoincrement())
  /// member 고유 ID
  memberId       Int  @unique
  /// 과제 제출 개수
  lessonCount    Int  @default(0)
  /// 피드백 한 총 개수
  feedbackCount  Int  @default(0)
  /// 커뮤니티
  communityCount Int  @default(0)
  /// 랭킹
  rank           Int?
  /// 포인트
  point          Int  @default(0)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

/// 멤버 팔로우 팔로잉 모델 
model MemberFollow {
  /// 고유 ID
  id          Int      @id @default(autoincrement())
  /// 팔로우 하는 멤버 ID
  followerId  Int
  /// 팔로잉 하는 멤버 ID
  followingId Int
  /// 생성 일자
  createdAt   DateTime @default(now())

  follower  Member @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following Member @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
}

/// 이미지에 대한 처리는 회의 후 추가
/// 과제에 대한 테이블
model Lesson {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 과제 생성한 멤버 고유 ID
  memberId    Int
  /// 출제자가 평가한 과제 난이도 
  levelId     Int
  /// 과제 제목
  title       String    @db.VarChar(255)
  /// 과제 설명 
  description String
  /// 과제 조회수        
  hit         Int       @default(0)
  /// 과제 썸네일
  thumbnail   String?   @db.VarChar(255)
  /// 생성일자
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  member                Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LessonLevel           LessonLevel             @relation(fields: [levelId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  LessonSolution        LessonSolution[]
  LessonHashtag         LessonHashtag[]
  LessonComment         LessonComment[]
  LessonLevelEvaluation LessonLevelEvaluation[]
  LessonBookMark        LessonBookMark[]
  ///LessonImage LessonImage[]
}

/// 과제의 이미지
///model LessonImage {
/// 고유 ID
///  id          Int           @id @default(autoincrement())
/// 과제 고유 ID
///  lessonId    Int
/// 과제 이미지 url
///  url         String        @db.VarChar(255)

///  Lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
///}

/// 과제를 수행한 멤버들의 과제 난이도 평가 테이블 
model LessonLevelEvaluation {
  /// 고유 ID
  id        Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId  Int
  /// 과제 고유 ID
  lessonId  Int
  /// 난이도 고유 ID
  levelId   Int
  /// 생성일자        
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자 
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt DateTime? @db.Timestamp(6)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 이미지에 대한 처리는 회의 후 추가
/// 과제"물"에 대한 테이블 
model LessonSolution {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId    Int
  /// 과제 고유 ID
  lessonId    Int
  /// 과제물 본문
  description String
  /// 생성일자          
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 멤버의 과제 북마크에 대한 테이블 
model LessonBookMark {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 과제를 북마크한 멤버 고유 ID
  memberId  Int
  /// 북마크 된 과제 고유 ID
  lessonId  Int
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 과제의 난이도에 대한 테이블 
model LessonLevel {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 난이도 (상, 중, 하)
  level     String   @db.VarChar(10)
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)
  Lesson    Lesson[]
}

/// 과제의 해시 태그
model LessonHashtag {
  /// 고유 ID
  id        Int      @id @default(autoincrement())
  /// 태그 
  tag       String   @db.VarChar(10)
  /// 과제 고유 ID
  lessonId  Int
  /// 생성일자
  createdAt DateTime @default(now()) @db.Timestamp(6)

  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 과제에 달린 댓글
model LessonComment {
  /// 고유 ID
  id          Int       @id @default(autoincrement())
  /// 멤버 고유 ID
  memberId    Int
  /// 과제 고유 ID
  lessonId    Int
  /// 댓글 설명
  description String    @db.VarChar(255)
  /// 생성일자  
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  /// 수정일자
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  /// 삭제일자
  deletedAt   DateTime? @db.Timestamp(6)

  Member Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// 멤버가 선택한 소분류 스킬
model MemberSkill {
  /// 고유 ID
  id          Int      @id @default(autoincrement())
  /// 소분류 고유 ID
  mainSkillId Int
  /// 멤버 고유 ID
  memberId    Int
  /// 생성일자
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  MainSkill MainSkill @relation(fields: [mainSkillId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  Member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  published   Boolean  @default(false)
  title       String   @db.VarChar(255)
  authorId    Int?
  description String?
  User        User?    @relation(fields: [authorId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  password  String   @db.VarChar(255)
  role      Int
  Post      Post[]
}
