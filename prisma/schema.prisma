generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MainSkill {
  id        Int      @id @default(autoincrement())
  majorId   Int
  name      String   @unique @db.VarChar(30)
  createdAt DateTime @default(dbgenerated("'2022-10-23 18:59:26.095774'::timestamp without time zone")) @db.Timestamp(6)
  Major     Major    @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  MemberSkill MemberSkill[]
}

model Major {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(30)
  createdAt   DateTime      @default(dbgenerated("'2022-10-23 18:59:23.716331'::timestamp without time zone")) @db.Timestamp(6)
  MainSkill   MainSkill[]
  Member      Member[]
}

model Member {
  id          Int           @id @default(autoincrement())
  majorId     Int?
  account     String        @unique @db.VarChar(255)
  nickname    String?       @unique @db.VarChar(30)
  status      Int           @default(0) @db.SmallInt
  loginType   Int           @db.SmallInt
  createdAt   DateTime      @default(dbgenerated("'2022-10-23 18:59:25.161758'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt   DateTime      @default(dbgenerated("'2022-10-23 18:59:25.161758'::timestamp without time zone")) @db.Timestamp(6)
  deletedAt   DateTime?     @db.Timestamp(6)
  Major       Major?        @relation(fields: [majorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  MemberSkill MemberSkill[]
}

model MemberSkill {
  id        Int      @id @default(autoincrement())
  mainSkillId   Int
  memberId  Int
  createdAt DateTime @default(dbgenerated("'2022-10-23 18:59:27.123211'::timestamp without time zone")) @db.Timestamp(6)
  MainSkill MainSkill    @relation(fields: [mainSkillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Member    Member   @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  published   Boolean  @default(false)
  title       String   @db.VarChar(255)
  authorId    Int?
  description String?
  User        User?    @relation(fields: [authorId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  password  String   @db.VarChar(255)
  role      Int
  Post      Post[]
}
